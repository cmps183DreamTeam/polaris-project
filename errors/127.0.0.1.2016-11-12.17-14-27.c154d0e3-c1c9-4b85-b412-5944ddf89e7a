(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> The value must be a valid Python or Numpy numeric type."
p3
sS'layer'
p4
S'/Users/arseniykhmelidze/Documents/Documents/UCSC/CMPS 183/web2py/applications/polarisproject/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\ntestvar = None\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    from astroquery.vizier import Vizier\n    from astropy.coordinates import SkyCoord\n    from astropy.coordinates import Angle\n    # user_in_targ_ra = \'18h36m56.33645s\'\n    # user_in_targ_dec = \'+38d47m01.2802s\'\n    # cat=["NOMAD", "UCAC"]\n    # rad = \'5s\'\n    # # set target\n    # cVega = celestial_target(user_in_targ_ra, user_in_targ_dec)\n    # # call find_guides\n    # call_dict = find_guides(cVega, cat, rad)\n    #\n    # response.flash = T("Hello World")\n    # return dict(message=T(\'Welcome to web2py!\'), call_dict=call_dict)\n    #     form_type = \'create\'\n    #     form = SQLFORM(db.tel)\n    #     #if form entered correctly, go to earch.html\n    #     if form.process().accepted:\n    #             redirect(URL(\'default\', \'search\'))\n    #     return dict(form = form)\n    return dict()\n\ndef test():\n    redirect(URL(\'default\', \'index\'))\n    response.flash = T(request.vars.name)\n    return dict(name=request.vars.name)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n\n    return dict(form=auth())\n\ndef celestial_target(ra, dec):\n    from astropy.coordinates import SkyCoord\n    coords = SkyCoord(ra, dec)\n    return coords\n\ndef find_guides(target, cat, rad):\n    from astroquery.vizier import Vizier\n    from astropy.coordinates import Angle\n    result = Vizier.query_region(target, radius=rad, catalog=cat)\n    dict = {}\n    #run through each table in results\n    # for x in range(0, len(result[0])-1):\n    #     t with RA, DEC, mag values\n    #     col_list = {}\n    #     col_list[\'RA\'] = float(result[0][x][\'_RAJ2000\'])\n    #     col_list[\'DEC\'] = float(result[0][x][\'_DEJ2000\'])\n    #     col_list[\'mag\'] = float(result[0][x][\'Vmag\'])\n    #     #col_list = [float(result[0][x][\'_RAJ2000\']), float(result[0][x][\'_DEJ2000\']), float(result[0][x][\'Vmag\'])]\n    #     dict[x] = col\n    i = 0\n    for row in (result[0]):\n        #create list with RA, DEC, mag values\n        col_list = {}\n        col_list[\'RA\'] = float(row[\'_RAJ2000\'])\n        col_list[\'DEC\'] = float(row[\'_DEJ2000\'])\n        col_list[\'mag\'] = float(row[\'Vmag\'])\n        #col_list = [float(result[0][x][\'_RAJ2000\']), float(result[0][x][\'_DEJ2000\']), float(result[0][x][\'Vmag\'])]\n        dict[i] = col_list\n        i = i + 1\n    return dict\n\n# def search():\n#     user_in_targ_ra = \'18h36m56.33645s\'\n#     user_in_targ_dec = \'+38d47m01.2802s\'\n#     cat=["NOMAD", "UCAC"]\n#     rad = \'5s\'\n#     # set target\n#     cVega = celestial_target(user_in_targ_ra, user_in_targ_dec)\n#     # call find_guides\n#     call_dict = find_guides(cVega, cat, rad)\n#\n#     if request.args(0) is not None:\n#         boom = request.args(0)\n#         return dict(boom = boom)\n#\n#     return dict(dict=call_dict)\n\n# def search():\n#     # get tel entered by user in db\n#     t = db(db.tel.name == "Vega").select().first()\n#     in_ra = t.ra\n#     in_dec = t.decl\n#     in_rad = t.rad\n#     in_cat = t.cat\n#     #user_in_targ_ra = \'18h36m56.33645s\'\n#     #user_in_targ_dec = \'+38d47m01.2802s\'\n#     #cat=["NOMAD", "UCAC"]\n#     #rad = \'5s\'\n#\n#     #call function to get coordinates\n#     cVega = celestial_target(in_ra, in_dec)\n#     #call find_guides\n#     call_dict = find_guides(cVega, in_cat, in_rad)\n#     return dict(dict = call_dict)\n\ndef search():\n    in_ra = request.vars.ra\n    in_dec = request.vars.decl\n    in_rad = request.vars.rad\n    in_cat = request.vars.cat\n    #call function to get coordinates\n    cVega = celestial_target(in_ra, in_dec)\n    #call find_guides\n    call_dict = find_guides(cVega, in_cat, in_rad)\n\n    # import json\n    # json_str = json.dumps(call_dict)\n\n    # testvar = call_dict\n    # setVar()\n    # testvar = 1\n    #data(json_str)\n\n    return dict(dict=call_dict)\n    # json_str = json.dumps(call_dict)\n    # return response.json(json_str)\n\n\n\n# def setVar():\n#     testvar = 3\n#     return\n\n\n\ndef data():\n    in_ra = request.vars.ra\n    in_dec = request.vars.decl\n    in_rad = request.vars.rad\n    in_cat = request.vars.cat\n    #call function to get coordinates\n    cVega = celestial_target(in_ra, in_dec)\n    #call find_guides\n    call_dict = find_guides(cVega, in_cat, in_rad)\n\n    # IMPLEMENTED JSON\n    import json\n    json_str = json.dumps("Hello")\n\n    # x = [3, 4, 5, 6]\n    return json_str\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(data)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/arseniykhmelidze/Documents/Documents/UCSC/CMPS 183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/arseniykhmelidze/Documents/Documents/UCSC/CMPS 183/web2py/applications/polarisproject/controllers/default.py", line 200, in <module>\n  File "/Users/arseniykhmelidze/Documents/Documents/UCSC/CMPS 183/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/arseniykhmelidze/Documents/Documents/UCSC/CMPS 183/web2py/applications/polarisproject/controllers/default.py", line 168, in data\n    cVega = celestial_target(in_ra, in_dec)\n  File "/Users/arseniykhmelidze/Documents/Documents/UCSC/CMPS 183/web2py/applications/polarisproject/controllers/default.py", line 69, in celestial_target\n    coords = SkyCoord(ra, dec)\n  File "//anaconda/lib/python2.7/site-packages/astropy/coordinates/sky_coordinate.py", line 196, in __init__\n    kwargs = self._parse_inputs(args, kwargs)\n  File "//anaconda/lib/python2.7/site-packages/astropy/coordinates/sky_coordinate.py", line 309, in _parse_inputs\n    coord_kwargs[frame_attr_name] = attr_class(arg, unit=unit)\n  File "//anaconda/lib/python2.7/site-packages/astropy/coordinates/angles.py", line 630, in __new__\n    self = super(Longitude, cls).__new__(cls, angle, unit=unit, **kwargs)\n  File "//anaconda/lib/python2.7/site-packages/astropy/coordinates/angles.py", line 126, in __new__\n    copy=copy)\n  File "//anaconda/lib/python2.7/site-packages/astropy/units/quantity.py", line 264, in __new__\n    raise TypeError("The value must be a valid Python or "\nTypeError: The value must be a valid Python or Numpy numeric type.\n'
p11
s.