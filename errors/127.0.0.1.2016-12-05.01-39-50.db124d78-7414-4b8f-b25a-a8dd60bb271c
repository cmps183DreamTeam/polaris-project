(dp1
S'output'
p2
S"<class 'astropy.units.core.UnitsError'> No unit was given - must be some kind of angle"
p3
sS'layer'
p4
S'c:\\web2py\\web2py\\applications\\po_2\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    #from astroquery.vizier import Vizier\n    #from astropy.coordinates import SkyCoord\n    #from astropy.coordinates import Angle\n    redirect(URL(\'default\', \'search\'))\n    return dict()\n\ndef mag_key(catalog):\n    return {\n        \'NOMAD\': \'Vmag\',\n        \'UCAC\': \'Vmag\',\n        \'GSC\': \'Pmag\',\n        \'USNO-B1\': \'R1mag\',\n    }[catalog]\n\ndef test():\n    redirect(URL(\'default\', \'index\'))\n    response.flash = T(request.vars.name)\n    return dict(name=request.vars.name)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n\n    return dict(form=auth())\n\ndef save_query():\n    """\n    import json\n    cart_json = request.vars.cart\n    cart_data = json.loads(cart_json)\n    db.customer_order.insert(\n        customer_info=request.vars.customer_info,\n        #transaction_token=json.dumps(token),\n        cart=request.vars.cart)\n    for item in cart_data:\n        for key in item:\n            print("key: " + key + "->" + str(item[key]))\n        row = db(db.product.id == item["id"]).select().first()\n        row.quantity = row.quantity - item["cart_quantity"]\n        row.update_record() # saves above change\n    return response.json(cart_data)\n    """\n    import json\n    return dict()\n\n\ndef celestial_target(ra, dec):\n    from astropy.coordinates import SkyCoord\n    coords = SkyCoord(ra, dec)\n    return coords\n\ndef find_guides(target, cat, rad):\n    from astroquery.vizier import Vizier\n    from astropy.coordinates import Angle\n    result = Vizier.query_region(target, radius=rad, catalog=cat)\n    #dict = {}\n    dict = []\n    #i = 0\n    mag_type = \'None\'\n    if len(result) > 0:\n        for row in (result[0]):\n            #create list with RA, DEC, mag values\n            col_list = {}\n            col_list[\'RA\'] = float(row[\'_RAJ2000\'])\n            col_list[\'DEC\'] = float(row[\'_DEJ2000\'])\n            #col_list[\'mag\'] = float(row[mag_key(cat)])#R1mag\n            #dict[1] will hold which magnitude we return\n            if (row[\'R1mag\']) is not None:\n                col_list[\'mag\'] = float(row[\'R1mag\'])\n                mag_type = \'1st\'\n            elif (row[\'R2mag\']) is not None:\n                col_list[\'mag\'] = float(row[\'R2mag\'])\n                mag_type = \'2nd\'\n            else:\n                col_list[\'mag\'] = \'-\'\n                #mag_type already intiated "None"\n            #dict[i] = col_list\n            dict.append(col_list)\n            #i = i + 1\n    else:\n        col_list = {}\n        col_list[\'RA\'] = float(0)\n        col_list[\'DEC\'] = float(0)\n        col_list[\'mag\'] = float(0)\n        #mag_type already intiated "None"\n        #dict[0] = col_list\n        dict.append(col_list)\n    col_list[\'mag_type\'] = mag_type   #initiated as "None", changes if an R1 or R2 value\n    return dict\n\ndef search():\n    if request.vars.ra is None:\n        request.vars.ra = 0\n        request.vars.dec = 0\n        request.vars.rad = 0\n        request.vars.cat =\'USNO-B1\'\n\n    in_ra = request.vars.ra\n    in_dec = request.vars.dec\n    in_rad = request.vars.rad\n    #in_cat = request.vars.cat\n    in_cat = \'USNO-B1\' if (request.vars.cat) is None else (request.vars.cat)\n    in_cat = \'USNO-B1\'\n    #call function to get coordinates\n    cVega = celestial_target(in_ra, in_dec)\n    #call find_guides\n    call_dict = find_guides(cVega, in_cat, in_rad)\n\n    import json\n    json_str = json.dumps(call_dict)\n    return dict(json_dict=json_str, dict = call_dict, reqs=request.vars)\n\ndef aprox_strehl():\n    import math\n    wavelength_reference = \'0.5 mu\' #micrometer #500nm\n    theta_const = \'10arcsec\'    #10s\n    theta_const_by_wavelength = theta_const*(wavelength_reference)*pow((wavelength/wavelength_reference), 5/6)\n    sima_pow_2 = pow((theta_const_by_wavelength/theta_const), 5/3)\n    strehl = pow(math.e, -sima_pow_2)\n    #NGS\n    return strehl\n\ndef save_query():\n    #in_ra = request.vars.ra\n    #in_dec = request.vars.dec\n    #in_rad = request.vars.rad\n    #\n    #form = SQLFORM(db.post).process()\n    ## Add controls\n    #form.add_button("Cancel", URL(\'default\', \'index\'))\n    ## If all-correct perform edit, redirect home\n    #if form.process().accepted:\n    #    session.flash = \'new record inserted\'\n    #    redirect(URL(\'default\', \'index\'))\n    #elif form.errors:\n    #    session.flash = T("Can\'t process those values.")\n    import json\n    return\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(search)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "c:\\web2py\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "c:\\web2py\\web2py\\applications\\po_2\\controllers/default.py", line 191, in <module>\n  File "c:\\web2py\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "c:\\web2py\\web2py\\applications\\po_2\\controllers/default.py", line 136, in search\n    cVega = celestial_target(in_ra, in_dec)\n  File "c:\\web2py\\web2py\\applications\\po_2\\controllers/default.py", line 80, in celestial_target\n    coords = SkyCoord(ra, dec)\n  File "C:\\Users\\bhouts\\Anaconda2\\lib\\site-packages\\astropy\\coordinates\\sky_coordinate.py", line 196, in __init__\n    kwargs = self._parse_inputs(args, kwargs)\n  File "C:\\Users\\bhouts\\Anaconda2\\lib\\site-packages\\astropy\\coordinates\\sky_coordinate.py", line 309, in _parse_inputs\n    coord_kwargs[frame_attr_name] = attr_class(arg, unit=unit)\n  File "C:\\Users\\bhouts\\Anaconda2\\lib\\site-packages\\astropy\\coordinates\\angles.py", line 630, in __new__\n    self = super(Longitude, cls).__new__(cls, angle, unit=unit, **kwargs)\n  File "C:\\Users\\bhouts\\Anaconda2\\lib\\site-packages\\astropy\\coordinates\\angles.py", line 129, in __new__\n    raise u.UnitsError("No unit was given - must be some kind of angle")\nUnitsError: No unit was given - must be some kind of angle\n'
p11
s.